{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","low","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","locationX","locationY","isAscending","slice","length","calculateWinner","winner","setState","concat","parseInt","step","status","current","winnerInfo","moves","map","move","desc","jumpTo","reverse","isDraw","handleClick","line","handlerToggle","lines","a","b","c","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d957bc31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// class Square extends React.Component {\n//   constructor(props) {\n//     super(props)\n  \n//     this.state = {\n//        value: null\n//     }\n//   }\n  \n//   render() {\n//     return (\n//       <button className=\"square\"\n//               onClick={() => this.props.onClick()}>\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\nfunction Square(props) {\n  const className = 'square' + (props.highlight ? ' highlight' : '');\n  return (\n    <button \n    className={className}\n    onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n\n  // constructor(props) {\n  //   super(props)\n  \n  //   this.state = {\n  //      squares: Array(9).fill(null),\n  //      xIsNext: true,\n  //   }\n  // }\n  \n \n\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return <Square key={i}\n                  value={this.props.squares[i]} \n                  onClick={() => this.props.onClick(i)}\n                  highlight={winLine && winLine.includes(i)}/>;\n  }\n\n  render() {\n\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if (winner) {\n    //   status = 'winner:' + winner;\n    // } else {\n    //   status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O')\n    // }\n\n    // const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    let squares = []\n    for (let i = 0; i < 3; i++) {\n      let low = [] \n      for (let j = 0; j < 3; j++) {\n        low.push(this.renderSquare(i*3 + j))\n      }\n      squares.push(<div className=\"board-row\">{low}</div>)\n    }\n    return (\n      <div>\n        {squares}\n        {/* <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div> */}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       history: [{\n         squares: Array(9).fill(null),\n       }],\n       stepNumber: 0,\n       xIsNext: true,\n       locationX: 0,\n       locationY: 0,\n       isAscending : true,\n    }\n  }\n  \n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    // create a copy of the squares array\n    const squares = current.squares.slice();\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        locationX: parseInt(i / 3) + 1,\n        locationY: i % 3 + 1,\n      }]),\n      stepNumber : history.length,\n      xIsNext: !this.state.xIsNext,\n      \n    })\n  }\n\n  jumpTo(step) {\n    this.setState( {\n      stepNumber : step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  handlerToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending,\n    })\n  }\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[this.state.stepNumber];\n    const winnerInfo = calculateWinner(current.squares);\n    const winner = winnerInfo.winner;\n    \n    const isAscending = this.state.isAscending;\n    let moves = history.map((step, move) => {\n      const desc = move ?\n      'Go to move #' + move:\n      'Go to game start';\n      return (\n        <div>\n         <p>current location {step.locationX}, {step.locationY}</p>\n        <li key={move}>\n          <button className = {move===stepNumber ? 'move-list-item-selected' : ''}\n                  onClick={() => this.jumpTo(move)}\n                  >\n                    {desc}\n          </button>\n        </li>\n        </div>\n      )\n    })\n    if (!isAscending) {\n      moves.reverse();\n    }\n    let status;\n    if (winner) {\n      status = 'Winner' + winner;\n    } else {\n      if (winnerInfo.isDraw) {\n        status = \"Draw\"\n      } else {\n      status = \"Next player is\" + (this.state.xIsNext ? 'X' : 'O');\n      }\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winLine={winnerInfo.line}/>\n           \n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n    <button onClick={() => this.handlerToggle()}>{isAscending ? 'Descend' : 'Asecond'}</button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner : squares[a],\n        line : lines[i],\n        isDraw: false,\n      }\n    }\n  };\n  let isDraw = true;\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n}\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}